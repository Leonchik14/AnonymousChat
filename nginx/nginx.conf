worker_processes auto;
events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    gzip          on;
    gzip_types    text/plain application/json text/css application/javascript;

    upstream authentication_service {
        server authentication-service:8083;
    }

    upstream chat_service {
        server chat-service:8082;
    }

    upstream matchmaking_service {
        server matchmaking-service:8081;
    }

    lua_shared_dict jwt_cache 10m;

    server {
        listen 80;
        server_name _;

        # 1) SPA
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # --- internal subrequest для валидации JWT ---
        location = /_auth_validate {
            internal;
            proxy_pass http://authentication_service/api/auth/validate;
            proxy_set_header Content-Type application/x-www-form-urlencoded;
            proxy_pass_request_body on;
            proxy_set_body       $request_body;
        }

        location /api/chat/ {
            access_by_lua_block {
                -- читаем токен из заголовка Authorization
                local auth_header = ngx.var.http_authorization or ""
                if auth_header == "" then
                    return ngx.exit(401)
                end
                -- если нужно поддержать "Bearer <token>", можно убрать префикс:
                local jwt = auth_header:gsub("^Bearer%s+", "")

                -- internal subrequest к нашему validate-эндпоинту
                local res = ngx.location.capture("/_auth_validate", {
                    method = ngx.HTTP_POST,
                    body   = "token=" .. jwt
                })
                if res.status ~= 200 then
                    return ngx.exit(401)
                end

                -- парсим ответ JSON {"userId":123}
                local cjson = require("cjson.safe")
                local body, err = cjson.decode(res.body)
                if not body or not body.userId then
                    return ngx.exit(401)
                end

                -- прокидываем X-User-ID в бэкенд
                ngx.req.set_header("X-User-ID", tostring(body.userId))
            }

            proxy_pass http://chat_service;
            proxy_set_header Host      $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # 3) Matchmaking API с точно такой же проверкой JWT
        location /api/matchmaking/ {
            access_by_lua_block {
                local auth_header = ngx.var.http_authorization or ""
                if auth_header == "" then
                    return ngx.exit(401)
                end
                local jwt = auth_header:gsub("^Bearer%s+", "")

                local res = ngx.location.capture("/_auth_validate", {
                    method = ngx.HTTP_POST,
                    body   = "token=" .. jwt
                })
                if res.status ~= 200 then
                    return ngx.exit(401)
                end

                local cjson = require("cjson.safe")
                local body, err = cjson.decode(res.body)
                if not body or not body.userId then
                    return ngx.exit(401)
                end

                ngx.req.set_header("X-User-ID", tostring(body.userId))
            }

            proxy_pass http://matchmaking_service;
            proxy_read_timeout 300s;      # ждать до 5 минут
            proxy_send_timeout 300s;
            proxy_set_header Host      $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # 4) Все auth-запросы проксируем напрямую
        location /api/auth/ {
            proxy_pass http://authentication_service;
            proxy_set_header Host      $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # 5) WebSocket для чата
        location /ws/chat/ {
            proxy_pass http://chat_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade   $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host      $host;
        }

        # 6) WebSocket для матчмейкинга
        location /ws/matchmaking/ {
            proxy_pass http://matchmaking_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade   $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host      $host;
        }
    }
}
