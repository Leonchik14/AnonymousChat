worker_processes auto;
events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    gzip          on;
    gzip_types    text/plain application/json text/css application/javascript;

    # Для обработки запросов в аутентификацию
    upstream authentication_service {
        server authentication-service:8083;
    }

    upstream chat_service {
        server chat-service:8082;
    }
    upstream matchmaking_service {
        server matchmaking-service:8081;
    }

    # Логика для проверки JWT
    lua_shared_dict jwt_cache 10m;  # Кэш для хранения результатов проверки

    server {
        listen 80;
        server_name _;

        # 1) Отдача SPA
        location / {
            root /usr/share/nginx/html;  # Убедитесь, что путь указывает на папку с фронтендом
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # 2) REST-API proxy
        location /api/chat/ {
            # Проверка JWT перед проксированием запроса
            set $jwt_valid 0;
            access_by_lua_block {
                local jwt = ngx.var.http_authorization
                if jwt then
                    local http = require("resty.http")
                    local client = http.new()
                    local res, err = client:request_uri("http://localhost:8083/validate", {
                        method = "POST",
                        body = "token=" .. jwt,
                        headers = {
                            ["Content-Type"] = "application/x-www-form-urlencoded"
                        }
                    })
                    if not res then
                        ngx.log(ngx.ERR, "Ошибка запроса в authentication_service: ", err)
                        return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end
                    if res.status == 200 then
                        ngx.var.jwt_valid = 1
                    else
                        ngx.var.jwt_valid = 0
                    end
                end
            }
            if ($jwt_valid = 0) {
                return 401 "Unauthorized";
            }
            proxy_pass http://chat_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /api/auth/ {
            proxy_pass http://authentication_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /api/matchmaking/ {
            # Проверка JWT перед проксированием запроса
            set $jwt_valid 0;
            access_by_lua_block {
                local jwt = ngx.var.http_authorization
                if jwt then
                    local http = require("resty.http")
                    local client = http.new()
                    local res, err = client:request_uri("http://localhost:8083/validate", {
                        method = "POST",
                        body = "token=" .. jwt,
                        headers = {
                            ["Content-Type"] = "application/x-www-form-urlencoded"
                        }
                    })
                    if not res then
                        ngx.log(ngx.ERR, "Ошибка запроса в authentication_service: ", err)
                        return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end
                    if res.status == 200 then
                        ngx.var.jwt_valid = 1
                    else
                        ngx.var.jwt_valid = 0
                    end
                end
            }
            if ($jwt_valid = 0) {
                return 401 "Unauthorized";
            }
            proxy_pass http://matchmaking_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # 3) WebSocket для чата
        location /ws/chat/ {
            proxy_pass http://chat_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }

        # 4) WebSocket для матчмейкинга
        location /ws/matchmaking/ {
            proxy_pass http://matchmaking_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }
    }
}
