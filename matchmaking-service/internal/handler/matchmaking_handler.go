package handler

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/gofiber/fiber/v2"
	"matchmaking-service/internal/service"
)

type MatchmakingHandler struct {
	matchmakingService *service.MatchmakingService
}

func NewMatchmakingHandler(matchmakingService *service.MatchmakingService) *MatchmakingHandler {
	return &MatchmakingHandler{matchmakingService: matchmakingService}
}

// StartMatchmaking - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
func (h *MatchmakingHandler) StartMatchmaking(c *fiber.Ctx) error {
	// 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	userIDStr := c.Get("X-User-ID")
	if userIDStr == "" {
		return c.Status(http.StatusUnauthorized).JSON(fiber.Map{"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å X-User-ID"})
	}
	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç X-User-ID"})
	}

	log.Printf("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—Å—Ç–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å...", userID)
	// 2) –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ ‚Äî –ø—É—Å—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–µ —ç—Ç–æ –∫–ª–∞–¥—ë—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∏
	// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –ø—Ä–∏–¥—ë—Ç chatID, –∫–æ–≥–¥–∞ –ø–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞.
	matchCh, err := h.matchmakingService.FindMatch(context.Background(), userID)
	if err != nil {
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
	}

	c.Set("Content-Type", "text/event-stream")
	c.Set("Cache-Control", "no-cache")
	c.Set("Connection", "keep-alive")

	c.Context().Response.Header.Set("Transfer-Encoding", "chunked")
	c.Context().Response.Header.Set("X-Accel-Buffering", "no")

	c.Context().Response.SetBodyStreamWriter(func(w *bufio.Writer) {
		if chatID, ok := <-matchCh; ok {
			fmt.Fprintf(w, "event: match\ndata: %d\n\n", chatID)
			w.Flush()
		}
	})
	return nil
}
