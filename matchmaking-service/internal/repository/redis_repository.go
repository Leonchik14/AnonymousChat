package repository

import (
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/redis/go-redis/v9"
)

type RedisRepository struct {
	client *redis.Client
}

func NewRedisRepository(client *redis.Client) *RedisRepository {
	return &RedisRepository{client: client}
}

func (r *RedisRepository) AddUserToQueue(ctx context.Context, userID int64) error {
	err := r.client.RPush(ctx, "matchmaking_queue", strconv.FormatInt(userID, 10)).Err()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: %w", err)
	}
	log.Printf("üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å", userID)
	return nil
}

func (r *RedisRepository) RemoveUserFromQueue(ctx context.Context, userID int64) error {
	// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
	err := r.client.LRem(ctx, "matchmaking_queue", 0, strconv.FormatInt(userID, 10)).Err()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: %w", err)
	}
	log.Printf("üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏", userID)
	return nil
}

func (r *RedisRepository) IsUserInQueue(ctx context.Context, userID int64) (bool, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
	queue, err := r.client.LRange(ctx, "matchmaking_queue", 0, -1).Result()
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏: %w", err)
	}
	userIDStr := strconv.FormatInt(userID, 10)
	for _, id := range queue {
		if id == userIDStr {
			return true, nil
		}
	}
	return false, nil
}

// Lua-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
const getMatchingUserScript = `
local queue_key = KEYS[1]
local user_id = ARGV[1]
local user = redis.call('LPOP', queue_key)
if user == false then
    return 0
end
if user == user_id then
    local next_user = redis.call('LPOP', queue_key)
    if next_user then
        redis.call('RPUSH', queue_key, user)
    end
    if next_user == false then
        return 0
    end
    return next_user
end
return user
`

func (r *RedisRepository) GetMatchingUser(ctx context.Context, userID int64) (int64, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Lua-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	result, err := r.client.Eval(ctx, getMatchingUserScript, []string{"matchmaking_queue"}, strconv.FormatInt(userID, 10)).Result()
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Lua-—Å–∫—Ä–∏–ø—Ç–∞: %w", err)
	}

	switch v := result.(type) {
	case int64:
		if v == 0 {
			return 0, nil
		}
		return v, nil
	case string:
		matchUserID, _ := strconv.ParseInt(v, 10, 64)
		log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏: %d", matchUserID)
		return matchUserID, nil
	default:
		return 0, fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Lua-—Å–∫—Ä–∏–ø—Ç–∞: %T", v)
	}
}
