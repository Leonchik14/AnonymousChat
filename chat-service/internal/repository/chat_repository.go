package repository

import (
	"context"
	"fmt"
	"log"

	"chat-service/pkg/models"
	"gorm.io/gorm"
)

// ChatRepository - —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
type ChatRepository struct {
	db *gorm.DB
}

// NewChatRepository - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func NewChatRepository(db *gorm.DB) *ChatRepository {
	return &ChatRepository{db: db}
}

// CreateChat - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —á–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
func (r *ChatRepository) CreateChat(ctx context.Context, user1ID, user2ID int64) (int64, error) {
	chat := models.Chat{User1ID: user1ID, User2ID: user2ID}

	result := r.db.WithContext(ctx).Create(&chat)
	if result.Error != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: %w", result.Error)
	}

	log.Printf("‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω: ID %d (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: %d, %d)", chat.ID, user1ID, user2ID)
	return chat.ID, nil
}

// SaveMessage - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (r *ChatRepository) SaveMessage(ctx context.Context, message *models.Message) error {
	result := r.db.WithContext(ctx).Create(message)
	if result.Error != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %w", result.Error)
	}

	log.Printf("üì© –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (—á–∞—Ç %d): %s", message.ChatID, message.Content)
	return nil
}

// GetChatHistory - –ø–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
func (r *ChatRepository) GetChatHistory(ctx context.Context, chatID int64) ([]models.Message, error) {
	var messages []models.Message

	result := r.db.WithContext(ctx).
		Where("chat_id = ?", chatID).
		Order("created_at ASC").
		Find(&messages)

	if result.Error != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: %w", result.Error)
	}

	log.Printf("üìú –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ %d", chatID)
	return messages, nil
}
