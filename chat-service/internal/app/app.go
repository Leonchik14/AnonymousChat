package app

import (
	"log"
	"os"

	"chat-service/internal/grpc"
	"chat-service/internal/handler"
	"chat-service/internal/repository"
	"chat-service/internal/service"
	"chat-service/pkg/models"

	"github.com/gofiber/contrib/websocket"
	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

// App - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type App struct {
	FiberApp *fiber.App
}

// NewApp - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func NewApp() *App {
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	// üîπ –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	dbUser := os.Getenv("DB_USER")
	dbPassword := os.Getenv("DB_PASSWORD")
	dbHost := os.Getenv("DB_HOST")
	dbPort := os.Getenv("DB_PORT")
	dbName := os.Getenv("DB_NAME")

	// üîπ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
	dsn := dbUser + ":" + dbPassword + "@tcp(" + dbHost + ":" + dbPort + ")/" + dbName + "?parseTime=true"

	// üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º MySQL
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: %v", err)
	}

	// üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
	if err := db.AutoMigrate(&models.Chat{}, &models.Message{}); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	log.Println("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

	// üîπ –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	chatRepo := repository.NewChatRepository(db)

	// üîπ –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
	chatService := service.NewChatService(chatRepo)

	// üîπ –ó–∞–ø—É—Å–∫–∞–µ–º gRPC-—Å–µ—Ä–≤–µ—Ä (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
	go grpc.RunGRPCServer(chatService)

	// üîπ –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä —Å Fiber
	app := fiber.New()
	chatHandler := handler.NewChatHandler(chatRepo)

	// üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	app.Get("/ws/chat/:chat_id", websocket.New(chatHandler.WebSocketHandler))
	app.Get("/chat/history/:chat_id", chatHandler.GetChatHistory)

	return &App{
		FiberApp: app,
	}
}

// Run - –∑–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
func (a *App) Run() {
	port := os.Getenv("APP_PORT")
	if port == "" {
		port = "8082"
	}

	log.Printf("üöÄ Chat Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	log.Fatal(a.FiberApp.Listen(":" + port))
}
